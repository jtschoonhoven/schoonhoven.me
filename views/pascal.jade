extends layout

block content

  .row
    form.form-inline(ng-controller="PascalCtrl")
      .form-group.col-xs-6
        label Levels:
        input.form-control(type="number" ng-model="n" value="{{ n }}")

      .checkbox.col-xs-6
        label Labels:
          input(type="checkbox" ng-model="drawLabels" ng-checked="{{drawLabels}}")
        br
        label Triangles:
          input(type="checkbox" ng-model="drawTriangles" ng-checked="{{drawTriangles}}")

  hr
  h2#chartTitle Pascal
  p#chartDesc Draws a 
    a(href="http://en.wikipedia.org/wiki/Pascal's_triangle") Pascal's Triangle. &nbsp;
    | When the odd numbers are filled in, a fractal emerges.

  script.
  
    function PascalCtrl($scope) {

      $scope.rows = [[1]];
      $scope.n = $scope.rows.length;
      $scope.drawLabels = true;
      $scope.drawTriangles = true;
      $scope.$watchCollection('[n, drawLabels, drawTriangles]', function() { $scope.getNRows($scope.n); $scope.draw($scope.rows, $scope.n) });
      $(window).resize(function(){ $scope.draw($scope.rows, $scope.n)  });
      $(window).on("scroll", function(){ 
        console.log('ok')
        $(window).off("scroll");
      })


      $scope.draw = function(data, n) {

        var n = n > 0 ? n : 1;

        // canvas dimensions
        var width = $(window).width() > $(window).height() ? $(window).height()/(Math.sqrt(3)/2) : $(window).width();
        var height = $(window).width() > $(window).height() ? $(window).width() : $(window).width()*(Math.sqrt(3)/2);

        // size of sub-triangles, scaled to fit canvas
        var w = width/(data[n-1].length);
        var h = (Math.sqrt(3)/2) * w;

        var body = d3.select("body");

        var svg = body.selectAll("svg").data([1]);
        svg.enter().insert("svg", ":first-child");
        svg.attr("width", $(window).width())
          .attr("height", $(window).height())
          .style("position", "absolute")
          .style("z-index", -1);

        var canvas = svg.selectAll(".canvas").data([1]);
        canvas.enter().append("g");
        canvas.attr("class", "canvas")
          .attr("transform", function(d,i){ 
            return "translate(" +($(window).width()/2-width/2)+ "," +($(window).height()-$(window).height())+ ")"; 
          });

        var group = canvas.selectAll(".group").data(data);
        group.enter().append("g");
        group.attr("class", "group").attr("transform", function(d,i) { return "translate(" +((data.length-(i+1))*w/2)+ "," +i*h+ ")" });
        group.exit().remove();

        var triangles = group.selectAll(".triangle").data(function(d) { return d; });
          if($scope.drawTriangles) triangles.enter().insert("path", ":first-child")
          else triangles.remove();
          triangles.attr("class", "triangle")
            .transition().duration(300).ease("circle")
            .attr("d", function(d,i) { return "M " +w/2+ " 0 L " +w+ " " +h+ " L 0 " +h+ " z"})
            .attr("transform", function(d,i) {return "translate(" +i*w+ ",0)" } )
            .style("fill", function(d) { return (d%2 || d===1) ? "black" : "white"; });

        var labels = group.selectAll(".label").data(function(d) { return d; });
          if($scope.drawLabels) labels.enter().append("text")
          else labels.remove();          
          labels.attr("class", "label")
            .style("font-weight", 600)
            .transition().duration(300).ease("elastic")
            .attr("text-anchor","middle")
            .attr("x", function() { return w/2; })
            .attr("y", h*.9)
            .attr("transform", function(d,i) {return "translate(" +i*w+ ",0)" } )
            .text(function(d) { return d })
            .style("text-align", "center")
            .style("font-size", function(d) { return (.5*w/(d.toString().length))  + "px"; })
          if($scope.drawTriangles) { labels.style("fill", function(d) { return (d%2 || d===1) ? "white" : "black"; }) }
          else { labels.style("fill", "black"); };

        };


      $scope.getNRows = function(n) {

        var n = (n>0) ? n : 1;

        // while n < rows.length, delete rows
        while(n<$scope.rows.length) {
          $scope.rows.splice($scope.rows.length-1,1);
        };

        // while rows.length < n, add rows
        for(var i=$scope.rows.length; i<n; i++){
          var lastRow = $scope.rows[$scope.rows.length-1];
          var nextRow = addRow(lastRow);
          $scope.rows.push(nextRow);
        };

        // calculate next row
        function addRow(prevRow) {
          var prevRow = prevRow || [1]
          var next = [1];
          for(var i=0; i<prevRow.length; i++) {
            var n1 = prevRow[i] || 0;
            var n2 = prevRow[i+1] || 0;
            next.push(n1 + n2);
          };

          return next;
        };
      };
    };
